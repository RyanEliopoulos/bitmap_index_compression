Sizes
    animals.txt:                1,342,193 bytes  # data source

    animals_bitmap.txt:         1,700,000  # bitmap version of animals.txt; transformation into a bitmap, no sorting
    animals_bitmap_sorted.txt:  1,700,000  # bitmap version of animals.txt; sorted lexicographically before transformation

    animals_compressed_32.txt:          1,650,160  # bitmap to compressed ratio: 1.03:1
	    literals:50356
	    fills:1260
		    of 1:0
		    of 0:1260

	    Fill data:
		    Average, 1:0
		    Median, 1:0
		    Average, 0:1
		    Median, 0:1


    animals_compressed_sorted_32.txt:   115,440    # bitmap to compressed ratio: 14.73:1
	    literals:1776
	    fills:49840
		    of 1:8795
		    of 0:41045

	    Fill data:
		    Average, 1:9
		    Median, 1:3
		    Average, 0:44
		    Median, 0:3

    animals_compressed_64.txt:          1,625,424  # bitmap to compressed ratio: 1.05:1
	    literals:25390
        fills:18
		    of 1:0
		    of 0:18

	    Fill data:
		    Average, 1:0
		    Median, 1:0
		    Average, 0:1
		    Median, 0:1

 
    animals_compressed_sorted_64.txt:   224,464    # bitmap to compressed ratio: 7.57:1
	    literals:1798
        fills:23610
		    of 1:3870
		    of 0:19740

	    Fill data:
		    Average, 1:4
		    Median, 1:1
		    Average, 0:22
		    Median, 0:1



WAH bitmap index/Compression

This writeup analyzes the following six files: 

    animals_bitmap.txt:                 A straightforward transformation of the csv animal data into a bitmap.
                                        single-character bytes are used to represent the bitmap.  Each row is a one-to-one
                                        transformation from the base data file.

    animals_bitmap_sorted.txt:          Same as above, except the data is sorted lexicographically beforehand

    animals_compressed_32.txt:          Compressed version of animals_bitmap.txt; uses WAH 32-bit words
                                        Each line in the file is an entire column from the bitmap file. 

    animals_compressed_sorted_32.txt:   Compressed version of animals_bitmap_sorted.txt; uses WAH 32-bit words
                                        Each line in the file is an entire column from the bitmap file.

    animals_compressed_64.txt:          Compressed version of animals_bitmap.txt; uses WAH 64-bit words
                                        Each line in the file is an entire column from the bitmap file.

    animals_compressed_sorted_64.txt:   Compressed version onf animals_bitmap.txt; uses WAH 64-bit words
                                        Each line in the file is an entire column from the bitmap file.


These six text files contain the character representation of bit fields and are comprised of the following:
( put the literal/fill, etc. data here)



Uncompressed Bitmaps: The first two files to be created, animals_bitmap.txt and animals_bitmap_sorted.txt, are the bulkiest 
    of the six and
  in fact are larger than the source file.  Because we are using a character strings rather than binary data files, each 'bit' 
  requires an entire byte to be stored.  A additional factor in the size growth is the number of columns required to represent
  each row -- 16. Thus each row requires more characters to store the same information, though bit map contrasts with the 
    source by providing the advantage of explicitly defining each potential value.  It is no surprise that these files are
    identical in size as they contain identical information, just in differing orders.

 
32-bit Compression:  These files are the result of performing WAH compression on the sorted and unsorted bitmaps files 
    using 32-bit words. The difference in compression ratios is stark: 
    1.03:1 for the unsorted bitmap and 14.73: for the sorted bitmap.  But this is not surprising considering the data. In fact, 
    despite the approximately 50k byte decrease in size for the unsorted bitmap, the vast majority of the save space is the 
    attributable to the reduced number of newline characters (99,984 fewer). Add back 50,256 for the space used on the 
    literal-header bits and we are left with only 212 byte saved as a result of the compression itself.  The sorted bitmap
    fared significantly better.

    The sorted version demonstrates the significant advantage lexicographical sorting provides this compression technique.
    By groups like bits there are far fewer literals, which result in a net-increase in size, and far more fills, which 
    provide a net reduction in size (as long as more than 1 run word is encoded into the fill).

    The greatest compression density in the sorted file is 2,419 words encoded in a single fill word vs 3 in the unsorted.
    No contest.


64-bit Compression:  First notice how close in in size the 64-bit unsorted and 32-bit unsorted compressed files, a difference
    of only 24,736 bytes.  The 64-bit encoding saves 24,966 bytes compared to 32-bits due to the decreased # of literals, 
    meaning less header bits are required, but the fill portion of the algorithm actually adds 230 bytes to the size. This makes
    sense intuitively: unsorted data requires more literals and the header-to-bit ratio is drastically better.

    Now what might not be intuitive about these results is the large gap in compression performance between 32-bit sorted 
    and 64-bit sorted bitmaps.
    We've already demonstrated the importance of sorting data before compression, so the question of word size's performance on 
    compression must now be answered.  As the data shows, they have approximately identical overhead required to store literals
    but the average 32-bit fill word encodes about twice as many run words as its 64-bit counterpart, thus the size difference. 

    However, this does not mean that 32-bit is inherently better, rather it is the better choice for this particular set of 
    data. The 64-bit word size has two large disadvantages here: large word size increases the sadness introduced by a dirty bit
    or few, reducing the number of fill words. In addition, the fill words themselves are underutilized -- 62 bits worth of 
    storage for counting run words, but the most ever needed required 11 bits to store a mere 1,190 run words of zero.  That
    equals at least 51 bits for each fill word totally wasted.  

    To conclude, 64-bit 

    
    

